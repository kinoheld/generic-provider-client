<?php
/**
 * MovieItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Kinoheld\GenericProviderClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * cinema
 *
 * cinema movie
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sm@kinoheld.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kinoheld\GenericProviderClient\Model;

use \ArrayAccess;
use \Kinoheld\GenericProviderClient\ObjectSerializer;

/**
 * MovieItem Class Doc Comment
 *
 * @category Class
 * @package  Kinoheld\GenericProviderClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MovieItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MovieItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'title' => 'string',
        'released' => 'string',
        'duration' => 'int',
        'description' => 'string',
        'distributor' => 'string',
        'thumb_url' => 'string',
        'trailer_url' => 'string',
        'icaa_id' => 'int',
        'rentrak_id' => 'int',
        'age_classification' => 'string',
        'genres' => 'string[]',
        'info' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'title' => null,
        'released' => null,
        'duration' => null,
        'description' => null,
        'distributor' => null,
        'thumb_url' => 'uri',
        'trailer_url' => 'uri',
        'icaa_id' => null,
        'rentrak_id' => null,
        'age_classification' => null,
        'genres' => null,
        'info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'title' => false,
        'released' => false,
        'duration' => false,
        'description' => false,
        'distributor' => false,
        'thumb_url' => false,
        'trailer_url' => false,
        'icaa_id' => false,
        'rentrak_id' => false,
        'age_classification' => false,
        'genres' => false,
        'info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'title' => 'title',
        'released' => 'released',
        'duration' => 'duration',
        'description' => 'description',
        'distributor' => 'distributor',
        'thumb_url' => 'thumbUrl',
        'trailer_url' => 'trailerUrl',
        'icaa_id' => 'icaaId',
        'rentrak_id' => 'rentrakId',
        'age_classification' => 'ageClassification',
        'genres' => 'genres',
        'info' => 'info'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'title' => 'setTitle',
        'released' => 'setReleased',
        'duration' => 'setDuration',
        'description' => 'setDescription',
        'distributor' => 'setDistributor',
        'thumb_url' => 'setThumbUrl',
        'trailer_url' => 'setTrailerUrl',
        'icaa_id' => 'setIcaaId',
        'rentrak_id' => 'setRentrakId',
        'age_classification' => 'setAgeClassification',
        'genres' => 'setGenres',
        'info' => 'setInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'title' => 'getTitle',
        'released' => 'getReleased',
        'duration' => 'getDuration',
        'description' => 'getDescription',
        'distributor' => 'getDistributor',
        'thumb_url' => 'getThumbUrl',
        'trailer_url' => 'getTrailerUrl',
        'icaa_id' => 'getIcaaId',
        'rentrak_id' => 'getRentrakId',
        'age_classification' => 'getAgeClassification',
        'genres' => 'getGenres',
        'info' => 'getInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('released', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('distributor', $data ?? [], null);
        $this->setIfExists('thumb_url', $data ?? [], null);
        $this->setIfExists('trailer_url', $data ?? [], null);
        $this->setIfExists('icaa_id', $data ?? [], null);
        $this->setIfExists('rentrak_id', $data ?? [], null);
        $this->setIfExists('age_classification', $data ?? [], null);
        $this->setIfExists('genres', $data ?? [], null);
        $this->setIfExists('info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['released'] === null) {
            $invalidProperties[] = "'released' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['distributor'] === null) {
            $invalidProperties[] = "'distributor' can't be null";
        }
        if ($this->container['thumb_url'] === null) {
            $invalidProperties[] = "'thumb_url' can't be null";
        }
        if ($this->container['trailer_url'] === null) {
            $invalidProperties[] = "'trailer_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets released
     *
     * @return string
     */
    public function getReleased()
    {
        return $this->container['released'];
    }

    /**
     * Sets released
     *
     * @param string $released released
     *
     * @return self
     */
    public function setReleased($released)
    {
        if (is_null($released)) {
            throw new \InvalidArgumentException('non-nullable released cannot be null');
        }
        $this->container['released'] = $released;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets distributor
     *
     * @return string
     */
    public function getDistributor()
    {
        return $this->container['distributor'];
    }

    /**
     * Sets distributor
     *
     * @param string $distributor distributor
     *
     * @return self
     */
    public function setDistributor($distributor)
    {
        if (is_null($distributor)) {
            throw new \InvalidArgumentException('non-nullable distributor cannot be null');
        }
        $this->container['distributor'] = $distributor;

        return $this;
    }

    /**
     * Gets thumb_url
     *
     * @return string
     */
    public function getThumbUrl()
    {
        return $this->container['thumb_url'];
    }

    /**
     * Sets thumb_url
     *
     * @param string $thumb_url thumb_url
     *
     * @return self
     */
    public function setThumbUrl($thumb_url)
    {
        if (is_null($thumb_url)) {
            throw new \InvalidArgumentException('non-nullable thumb_url cannot be null');
        }
        $this->container['thumb_url'] = $thumb_url;

        return $this;
    }

    /**
     * Gets trailer_url
     *
     * @return string
     */
    public function getTrailerUrl()
    {
        return $this->container['trailer_url'];
    }

    /**
     * Sets trailer_url
     *
     * @param string $trailer_url trailer_url
     *
     * @return self
     */
    public function setTrailerUrl($trailer_url)
    {
        if (is_null($trailer_url)) {
            throw new \InvalidArgumentException('non-nullable trailer_url cannot be null');
        }
        $this->container['trailer_url'] = $trailer_url;

        return $this;
    }

    /**
     * Gets icaa_id
     *
     * @return int|null
     */
    public function getIcaaId()
    {
        return $this->container['icaa_id'];
    }

    /**
     * Sets icaa_id
     *
     * @param int|null $icaa_id icaa_id
     *
     * @return self
     */
    public function setIcaaId($icaa_id)
    {
        if (is_null($icaa_id)) {
            throw new \InvalidArgumentException('non-nullable icaa_id cannot be null');
        }
        $this->container['icaa_id'] = $icaa_id;

        return $this;
    }

    /**
     * Gets rentrak_id
     *
     * @return int|null
     */
    public function getRentrakId()
    {
        return $this->container['rentrak_id'];
    }

    /**
     * Sets rentrak_id
     *
     * @param int|null $rentrak_id rentrak_id
     *
     * @return self
     */
    public function setRentrakId($rentrak_id)
    {
        if (is_null($rentrak_id)) {
            throw new \InvalidArgumentException('non-nullable rentrak_id cannot be null');
        }
        $this->container['rentrak_id'] = $rentrak_id;

        return $this;
    }

    /**
     * Gets age_classification
     *
     * @return string|null
     */
    public function getAgeClassification()
    {
        return $this->container['age_classification'];
    }

    /**
     * Sets age_classification
     *
     * @param string|null $age_classification age_classification
     *
     * @return self
     */
    public function setAgeClassification($age_classification)
    {
        if (is_null($age_classification)) {
            throw new \InvalidArgumentException('non-nullable age_classification cannot be null');
        }
        $this->container['age_classification'] = $age_classification;

        return $this;
    }

    /**
     * Gets genres
     *
     * @return string[]|null
     */
    public function getGenres()
    {
        return $this->container['genres'];
    }

    /**
     * Sets genres
     *
     * @param string[]|null $genres genres
     *
     * @return self
     */
    public function setGenres($genres)
    {
        if (is_null($genres)) {
            throw new \InvalidArgumentException('non-nullable genres cannot be null');
        }
        $this->container['genres'] = $genres;

        return $this;
    }

    /**
     * Gets info
     *
     * @return string|null
     */
    public function getInfo()
    {
        return $this->container['info'];
    }

    /**
     * Sets info
     *
     * @param string|null $info info
     *
     * @return self
     */
    public function setInfo($info)
    {
        if (is_null($info)) {
            throw new \InvalidArgumentException('non-nullable info cannot be null');
        }
        $this->container['info'] = $info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


