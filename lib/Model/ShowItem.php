<?php
/**
 * ShowItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * cinema
 *
 * cinema movie
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sm@kinoheld.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ShowItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShowItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShowItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'movie_id' => 'int',
        'duration' => 'int',
        'beginning' => 'string',
        'sale_start' => 'string',
        'sale_end' => 'string',
        'auditorium_id' => 'int',
        'seat_selection_available' => 'bool',
        'icaa_id' => 'int',
        'language_audio' => 'string',
        'language_subtitle' => 'string',
        'price_areas' => '\OpenAPI\Client\Model\PriceAreaItem[]',
        'tickets_total' => 'int',
        'tickets_sold' => 'int',
        'tickets_free' => 'int',
        'flags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'movie_id' => null,
        'duration' => null,
        'beginning' => null,
        'sale_start' => null,
        'sale_end' => null,
        'auditorium_id' => null,
        'seat_selection_available' => null,
        'icaa_id' => null,
        'language_audio' => null,
        'language_subtitle' => null,
        'price_areas' => null,
        'tickets_total' => null,
        'tickets_sold' => null,
        'tickets_free' => null,
        'flags' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'movie_id' => false,
        'duration' => false,
        'beginning' => false,
        'sale_start' => false,
        'sale_end' => true,
        'auditorium_id' => false,
        'seat_selection_available' => false,
        'icaa_id' => true,
        'language_audio' => true,
        'language_subtitle' => true,
        'price_areas' => false,
        'tickets_total' => false,
        'tickets_sold' => false,
        'tickets_free' => false,
        'flags' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'movie_id' => 'movieId',
        'duration' => 'duration',
        'beginning' => 'beginning',
        'sale_start' => 'saleStart',
        'sale_end' => 'saleEnd',
        'auditorium_id' => 'auditoriumId',
        'seat_selection_available' => 'seatSelectionAvailable',
        'icaa_id' => 'icaaId',
        'language_audio' => 'languageAudio',
        'language_subtitle' => 'languageSubtitle',
        'price_areas' => 'priceAreas',
        'tickets_total' => 'ticketsTotal',
        'tickets_sold' => 'ticketsSold',
        'tickets_free' => 'ticketsFree',
        'flags' => 'flags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'movie_id' => 'setMovieId',
        'duration' => 'setDuration',
        'beginning' => 'setBeginning',
        'sale_start' => 'setSaleStart',
        'sale_end' => 'setSaleEnd',
        'auditorium_id' => 'setAuditoriumId',
        'seat_selection_available' => 'setSeatSelectionAvailable',
        'icaa_id' => 'setIcaaId',
        'language_audio' => 'setLanguageAudio',
        'language_subtitle' => 'setLanguageSubtitle',
        'price_areas' => 'setPriceAreas',
        'tickets_total' => 'setTicketsTotal',
        'tickets_sold' => 'setTicketsSold',
        'tickets_free' => 'setTicketsFree',
        'flags' => 'setFlags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'movie_id' => 'getMovieId',
        'duration' => 'getDuration',
        'beginning' => 'getBeginning',
        'sale_start' => 'getSaleStart',
        'sale_end' => 'getSaleEnd',
        'auditorium_id' => 'getAuditoriumId',
        'seat_selection_available' => 'getSeatSelectionAvailable',
        'icaa_id' => 'getIcaaId',
        'language_audio' => 'getLanguageAudio',
        'language_subtitle' => 'getLanguageSubtitle',
        'price_areas' => 'getPriceAreas',
        'tickets_total' => 'getTicketsTotal',
        'tickets_sold' => 'getTicketsSold',
        'tickets_free' => 'getTicketsFree',
        'flags' => 'getFlags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FLAGS__3_D = 'FLAG_3D';
    public const FLAGS_DIGITAL = 'FLAG_DIGITAL';
    public const FLAGS__4_K = 'FLAG_4K';
    public const FLAGS_HFR = 'FLAG_HFR';
    public const FLAGS_DBOX = 'FLAG_DBOX';
    public const FLAGS_IMAX = 'FLAG_IMAX';
    public const FLAGS_ATMOS = 'FLAG_ATMOS';
    public const FLAGS_LIVE = 'FLAG_LIVE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFlagsAllowableValues()
    {
        return [
            self::FLAGS__3_D,
            self::FLAGS_DIGITAL,
            self::FLAGS__4_K,
            self::FLAGS_HFR,
            self::FLAGS_DBOX,
            self::FLAGS_IMAX,
            self::FLAGS_ATMOS,
            self::FLAGS_LIVE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('movie_id', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('beginning', $data ?? [], null);
        $this->setIfExists('sale_start', $data ?? [], null);
        $this->setIfExists('sale_end', $data ?? [], null);
        $this->setIfExists('auditorium_id', $data ?? [], null);
        $this->setIfExists('seat_selection_available', $data ?? [], null);
        $this->setIfExists('icaa_id', $data ?? [], null);
        $this->setIfExists('language_audio', $data ?? [], null);
        $this->setIfExists('language_subtitle', $data ?? [], null);
        $this->setIfExists('price_areas', $data ?? [], null);
        $this->setIfExists('tickets_total', $data ?? [], null);
        $this->setIfExists('tickets_sold', $data ?? [], null);
        $this->setIfExists('tickets_free', $data ?? [], null);
        $this->setIfExists('flags', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['movie_id'] === null) {
            $invalidProperties[] = "'movie_id' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['beginning'] === null) {
            $invalidProperties[] = "'beginning' can't be null";
        }
        if ($this->container['sale_start'] === null) {
            $invalidProperties[] = "'sale_start' can't be null";
        }
        if ($this->container['sale_end'] === null) {
            $invalidProperties[] = "'sale_end' can't be null";
        }
        if ($this->container['auditorium_id'] === null) {
            $invalidProperties[] = "'auditorium_id' can't be null";
        }
        if ($this->container['seat_selection_available'] === null) {
            $invalidProperties[] = "'seat_selection_available' can't be null";
        }
        if ($this->container['icaa_id'] === null) {
            $invalidProperties[] = "'icaa_id' can't be null";
        }
        if ($this->container['language_audio'] === null) {
            $invalidProperties[] = "'language_audio' can't be null";
        }
        if ($this->container['language_subtitle'] === null) {
            $invalidProperties[] = "'language_subtitle' can't be null";
        }
        if ($this->container['price_areas'] === null) {
            $invalidProperties[] = "'price_areas' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets movie_id
     *
     * @return int
     */
    public function getMovieId()
    {
        return $this->container['movie_id'];
    }

    /**
     * Sets movie_id
     *
     * @param int $movie_id movie_id
     *
     * @return self
     */
    public function setMovieId($movie_id)
    {
        if (is_null($movie_id)) {
            throw new \InvalidArgumentException('non-nullable movie_id cannot be null');
        }
        $this->container['movie_id'] = $movie_id;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets beginning
     *
     * @return string
     */
    public function getBeginning()
    {
        return $this->container['beginning'];
    }

    /**
     * Sets beginning
     *
     * @param string $beginning beginning
     *
     * @return self
     */
    public function setBeginning($beginning)
    {
        if (is_null($beginning)) {
            throw new \InvalidArgumentException('non-nullable beginning cannot be null');
        }
        $this->container['beginning'] = $beginning;

        return $this;
    }

    /**
     * Gets sale_start
     *
     * @return string
     */
    public function getSaleStart()
    {
        return $this->container['sale_start'];
    }

    /**
     * Sets sale_start
     *
     * @param string $sale_start sale_start
     *
     * @return self
     */
    public function setSaleStart($sale_start)
    {
        if (is_null($sale_start)) {
            throw new \InvalidArgumentException('non-nullable sale_start cannot be null');
        }
        $this->container['sale_start'] = $sale_start;

        return $this;
    }

    /**
     * Gets sale_end
     *
     * @return string
     */
    public function getSaleEnd()
    {
        return $this->container['sale_end'];
    }

    /**
     * Sets sale_end
     *
     * @param string $sale_end sale_end
     *
     * @return self
     */
    public function setSaleEnd($sale_end)
    {
        if (is_null($sale_end)) {
            array_push($this->openAPINullablesSetToNull, 'sale_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sale_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sale_end'] = $sale_end;

        return $this;
    }

    /**
     * Gets auditorium_id
     *
     * @return int
     */
    public function getAuditoriumId()
    {
        return $this->container['auditorium_id'];
    }

    /**
     * Sets auditorium_id
     *
     * @param int $auditorium_id auditorium_id
     *
     * @return self
     */
    public function setAuditoriumId($auditorium_id)
    {
        if (is_null($auditorium_id)) {
            throw new \InvalidArgumentException('non-nullable auditorium_id cannot be null');
        }
        $this->container['auditorium_id'] = $auditorium_id;

        return $this;
    }

    /**
     * Gets seat_selection_available
     *
     * @return bool
     */
    public function getSeatSelectionAvailable()
    {
        return $this->container['seat_selection_available'];
    }

    /**
     * Sets seat_selection_available
     *
     * @param bool $seat_selection_available seat_selection_available
     *
     * @return self
     */
    public function setSeatSelectionAvailable($seat_selection_available)
    {
        if (is_null($seat_selection_available)) {
            throw new \InvalidArgumentException('non-nullable seat_selection_available cannot be null');
        }
        $this->container['seat_selection_available'] = $seat_selection_available;

        return $this;
    }

    /**
     * Gets icaa_id
     *
     * @return int
     */
    public function getIcaaId()
    {
        return $this->container['icaa_id'];
    }

    /**
     * Sets icaa_id
     *
     * @param int $icaa_id icaa_id
     *
     * @return self
     */
    public function setIcaaId($icaa_id)
    {
        if (is_null($icaa_id)) {
            array_push($this->openAPINullablesSetToNull, 'icaa_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icaa_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['icaa_id'] = $icaa_id;

        return $this;
    }

    /**
     * Gets language_audio
     *
     * @return string
     */
    public function getLanguageAudio()
    {
        return $this->container['language_audio'];
    }

    /**
     * Sets language_audio
     *
     * @param string $language_audio language_audio
     *
     * @return self
     */
    public function setLanguageAudio($language_audio)
    {
        if (is_null($language_audio)) {
            array_push($this->openAPINullablesSetToNull, 'language_audio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language_audio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['language_audio'] = $language_audio;

        return $this;
    }

    /**
     * Gets language_subtitle
     *
     * @return string
     */
    public function getLanguageSubtitle()
    {
        return $this->container['language_subtitle'];
    }

    /**
     * Sets language_subtitle
     *
     * @param string $language_subtitle language_subtitle
     *
     * @return self
     */
    public function setLanguageSubtitle($language_subtitle)
    {
        if (is_null($language_subtitle)) {
            array_push($this->openAPINullablesSetToNull, 'language_subtitle');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language_subtitle', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['language_subtitle'] = $language_subtitle;

        return $this;
    }

    /**
     * Gets price_areas
     *
     * @return \OpenAPI\Client\Model\PriceAreaItem[]
     */
    public function getPriceAreas()
    {
        return $this->container['price_areas'];
    }

    /**
     * Sets price_areas
     *
     * @param \OpenAPI\Client\Model\PriceAreaItem[] $price_areas price_areas
     *
     * @return self
     */
    public function setPriceAreas($price_areas)
    {
        if (is_null($price_areas)) {
            throw new \InvalidArgumentException('non-nullable price_areas cannot be null');
        }
        $this->container['price_areas'] = $price_areas;

        return $this;
    }

    /**
     * Gets tickets_total
     *
     * @return int|null
     */
    public function getTicketsTotal()
    {
        return $this->container['tickets_total'];
    }

    /**
     * Sets tickets_total
     *
     * @param int|null $tickets_total tickets_total
     *
     * @return self
     */
    public function setTicketsTotal($tickets_total)
    {
        if (is_null($tickets_total)) {
            throw new \InvalidArgumentException('non-nullable tickets_total cannot be null');
        }
        $this->container['tickets_total'] = $tickets_total;

        return $this;
    }

    /**
     * Gets tickets_sold
     *
     * @return int|null
     */
    public function getTicketsSold()
    {
        return $this->container['tickets_sold'];
    }

    /**
     * Sets tickets_sold
     *
     * @param int|null $tickets_sold tickets_sold
     *
     * @return self
     */
    public function setTicketsSold($tickets_sold)
    {
        if (is_null($tickets_sold)) {
            throw new \InvalidArgumentException('non-nullable tickets_sold cannot be null');
        }
        $this->container['tickets_sold'] = $tickets_sold;

        return $this;
    }

    /**
     * Gets tickets_free
     *
     * @return int|null
     */
    public function getTicketsFree()
    {
        return $this->container['tickets_free'];
    }

    /**
     * Sets tickets_free
     *
     * @param int|null $tickets_free tickets_free
     *
     * @return self
     */
    public function setTicketsFree($tickets_free)
    {
        if (is_null($tickets_free)) {
            throw new \InvalidArgumentException('non-nullable tickets_free cannot be null');
        }
        $this->container['tickets_free'] = $tickets_free;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return string[]|null
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param string[]|null $flags flags
     *
     * @return self
     */
    public function setFlags($flags)
    {
        if (is_null($flags)) {
            throw new \InvalidArgumentException('non-nullable flags cannot be null');
        }
        $allowedValues = $this->getFlagsAllowableValues();
        if (array_diff($flags, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'flags', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['flags'] = $flags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


