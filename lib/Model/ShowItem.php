<?php
/**
 * ShowItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  kinoheld\GenericProviderClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * cinema
 *
 * cinema movie
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sm@kinoheld.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.14
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace kinoheld\GenericProviderClient\Model;

use \ArrayAccess;
use \kinoheld\GenericProviderClient\ObjectSerializer;

/**
 * ShowItem Class Doc Comment
 *
 * @category Class
 * @package  kinoheld\GenericProviderClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShowItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShowItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'movieId' => 'int',
'duration' => 'int',
'beginning' => 'string',
'saleStart' => 'string',
'saleEnd' => 'string',
'auditoriumId' => 'int',
'seatSelectionAvailable' => 'bool',
'icaaId' => 'int',
'languageAudio' => 'string',
'languageSubtitle' => 'string',
'priceAreas' => '\kinoheld\GenericProviderClient\Model\PriceAreaItem[]',
'ticketsTotal' => 'int',
'ticketsSold' => 'int',
'ticketsFree' => 'int',
'flags' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'movieId' => null,
'duration' => null,
'beginning' => null,
'saleStart' => null,
'saleEnd' => null,
'auditoriumId' => null,
'seatSelectionAvailable' => null,
'icaaId' => null,
'languageAudio' => null,
'languageSubtitle' => null,
'priceAreas' => null,
'ticketsTotal' => null,
'ticketsSold' => null,
'ticketsFree' => null,
'flags' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'movieId' => 'movieId',
'duration' => 'duration',
'beginning' => 'beginning',
'saleStart' => 'saleStart',
'saleEnd' => 'saleEnd',
'auditoriumId' => 'auditoriumId',
'seatSelectionAvailable' => 'seatSelectionAvailable',
'icaaId' => 'icaaId',
'languageAudio' => 'languageAudio',
'languageSubtitle' => 'languageSubtitle',
'priceAreas' => 'priceAreas',
'ticketsTotal' => 'ticketsTotal',
'ticketsSold' => 'ticketsSold',
'ticketsFree' => 'ticketsFree',
'flags' => 'flags'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'movieId' => 'setMovieId',
'duration' => 'setDuration',
'beginning' => 'setBeginning',
'saleStart' => 'setSaleStart',
'saleEnd' => 'setSaleEnd',
'auditoriumId' => 'setAuditoriumId',
'seatSelectionAvailable' => 'setSeatSelectionAvailable',
'icaaId' => 'setIcaaId',
'languageAudio' => 'setLanguageAudio',
'languageSubtitle' => 'setLanguageSubtitle',
'priceAreas' => 'setPriceAreas',
'ticketsTotal' => 'setTicketsTotal',
'ticketsSold' => 'setTicketsSold',
'ticketsFree' => 'setTicketsFree',
'flags' => 'setFlags'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'movieId' => 'getMovieId',
'duration' => 'getDuration',
'beginning' => 'getBeginning',
'saleStart' => 'getSaleStart',
'saleEnd' => 'getSaleEnd',
'auditoriumId' => 'getAuditoriumId',
'seatSelectionAvailable' => 'getSeatSelectionAvailable',
'icaaId' => 'getIcaaId',
'languageAudio' => 'getLanguageAudio',
'languageSubtitle' => 'getLanguageSubtitle',
'priceAreas' => 'getPriceAreas',
'ticketsTotal' => 'getTicketsTotal',
'ticketsSold' => 'getTicketsSold',
'ticketsFree' => 'getTicketsFree',
'flags' => 'getFlags'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FLAGS__3_D = 'FLAG_3D';
const FLAGS_DIGITAL = 'FLAG_DIGITAL';
const FLAGS__4_K = 'FLAG_4K';
const FLAGS_HFR = 'FLAG_HFR';
const FLAGS_DBOX = 'FLAG_DBOX';
const FLAGS_IMAX = 'FLAG_IMAX';
const FLAGS_ATMOS = 'FLAG_ATMOS';
const FLAGS_LIVE = 'FLAG_LIVE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFlagsAllowableValues()
    {
        return [
            self::FLAGS__3_D,
self::FLAGS_DIGITAL,
self::FLAGS__4_K,
self::FLAGS_HFR,
self::FLAGS_DBOX,
self::FLAGS_IMAX,
self::FLAGS_ATMOS,
self::FLAGS_LIVE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['movieId'] = isset($data['movieId']) ? $data['movieId'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['beginning'] = isset($data['beginning']) ? $data['beginning'] : null;
        $this->container['saleStart'] = isset($data['saleStart']) ? $data['saleStart'] : null;
        $this->container['saleEnd'] = isset($data['saleEnd']) ? $data['saleEnd'] : null;
        $this->container['auditoriumId'] = isset($data['auditoriumId']) ? $data['auditoriumId'] : null;
        $this->container['seatSelectionAvailable'] = isset($data['seatSelectionAvailable']) ? $data['seatSelectionAvailable'] : null;
        $this->container['icaaId'] = isset($data['icaaId']) ? $data['icaaId'] : null;
        $this->container['languageAudio'] = isset($data['languageAudio']) ? $data['languageAudio'] : null;
        $this->container['languageSubtitle'] = isset($data['languageSubtitle']) ? $data['languageSubtitle'] : null;
        $this->container['priceAreas'] = isset($data['priceAreas']) ? $data['priceAreas'] : null;
        $this->container['ticketsTotal'] = isset($data['ticketsTotal']) ? $data['ticketsTotal'] : null;
        $this->container['ticketsSold'] = isset($data['ticketsSold']) ? $data['ticketsSold'] : null;
        $this->container['ticketsFree'] = isset($data['ticketsFree']) ? $data['ticketsFree'] : null;
        $this->container['flags'] = isset($data['flags']) ? $data['flags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['movieId'] === null) {
            $invalidProperties[] = "'movieId' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['beginning'] === null) {
            $invalidProperties[] = "'beginning' can't be null";
        }
        if ($this->container['saleStart'] === null) {
            $invalidProperties[] = "'saleStart' can't be null";
        }
        if ($this->container['saleEnd'] === null) {
            $invalidProperties[] = "'saleEnd' can't be null";
        }
        if ($this->container['auditoriumId'] === null) {
            $invalidProperties[] = "'auditoriumId' can't be null";
        }
        if ($this->container['seatSelectionAvailable'] === null) {
            $invalidProperties[] = "'seatSelectionAvailable' can't be null";
        }
        if ($this->container['icaaId'] === null) {
            $invalidProperties[] = "'icaaId' can't be null";
        }
        if ($this->container['languageAudio'] === null) {
            $invalidProperties[] = "'languageAudio' can't be null";
        }
        if ($this->container['languageSubtitle'] === null) {
            $invalidProperties[] = "'languageSubtitle' can't be null";
        }
        if ($this->container['priceAreas'] === null) {
            $invalidProperties[] = "'priceAreas' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets movieId
     *
     * @return int
     */
    public function getMovieId()
    {
        return $this->container['movieId'];
    }

    /**
     * Sets movieId
     *
     * @param int $movieId movieId
     *
     * @return $this
     */
    public function setMovieId($movieId)
    {
        $this->container['movieId'] = $movieId;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets beginning
     *
     * @return string
     */
    public function getBeginning()
    {
        return $this->container['beginning'];
    }

    /**
     * Sets beginning
     *
     * @param string $beginning beginning
     *
     * @return $this
     */
    public function setBeginning($beginning)
    {
        $this->container['beginning'] = $beginning;

        return $this;
    }

    /**
     * Gets saleStart
     *
     * @return string
     */
    public function getSaleStart()
    {
        return $this->container['saleStart'];
    }

    /**
     * Sets saleStart
     *
     * @param string $saleStart saleStart
     *
     * @return $this
     */
    public function setSaleStart($saleStart)
    {
        $this->container['saleStart'] = $saleStart;

        return $this;
    }

    /**
     * Gets saleEnd
     *
     * @return string
     */
    public function getSaleEnd()
    {
        return $this->container['saleEnd'];
    }

    /**
     * Sets saleEnd
     *
     * @param string $saleEnd saleEnd
     *
     * @return $this
     */
    public function setSaleEnd($saleEnd)
    {
        $this->container['saleEnd'] = $saleEnd;

        return $this;
    }

    /**
     * Gets auditoriumId
     *
     * @return int
     */
    public function getAuditoriumId()
    {
        return $this->container['auditoriumId'];
    }

    /**
     * Sets auditoriumId
     *
     * @param int $auditoriumId auditoriumId
     *
     * @return $this
     */
    public function setAuditoriumId($auditoriumId)
    {
        $this->container['auditoriumId'] = $auditoriumId;

        return $this;
    }

    /**
     * Gets seatSelectionAvailable
     *
     * @return bool
     */
    public function getSeatSelectionAvailable()
    {
        return $this->container['seatSelectionAvailable'];
    }

    /**
     * Sets seatSelectionAvailable
     *
     * @param bool $seatSelectionAvailable seatSelectionAvailable
     *
     * @return $this
     */
    public function setSeatSelectionAvailable($seatSelectionAvailable)
    {
        $this->container['seatSelectionAvailable'] = $seatSelectionAvailable;

        return $this;
    }

    /**
     * Gets icaaId
     *
     * @return int
     */
    public function getIcaaId()
    {
        return $this->container['icaaId'];
    }

    /**
     * Sets icaaId
     *
     * @param int $icaaId icaaId
     *
     * @return $this
     */
    public function setIcaaId($icaaId)
    {
        $this->container['icaaId'] = $icaaId;

        return $this;
    }

    /**
     * Gets languageAudio
     *
     * @return string
     */
    public function getLanguageAudio()
    {
        return $this->container['languageAudio'];
    }

    /**
     * Sets languageAudio
     *
     * @param string $languageAudio languageAudio
     *
     * @return $this
     */
    public function setLanguageAudio($languageAudio)
    {
        $this->container['languageAudio'] = $languageAudio;

        return $this;
    }

    /**
     * Gets languageSubtitle
     *
     * @return string
     */
    public function getLanguageSubtitle()
    {
        return $this->container['languageSubtitle'];
    }

    /**
     * Sets languageSubtitle
     *
     * @param string $languageSubtitle languageSubtitle
     *
     * @return $this
     */
    public function setLanguageSubtitle($languageSubtitle)
    {
        $this->container['languageSubtitle'] = $languageSubtitle;

        return $this;
    }

    /**
     * Gets priceAreas
     *
     * @return \kinoheld\GenericProviderClient\Model\PriceAreaItem[]
     */
    public function getPriceAreas()
    {
        return $this->container['priceAreas'];
    }

    /**
     * Sets priceAreas
     *
     * @param \kinoheld\GenericProviderClient\Model\PriceAreaItem[] $priceAreas priceAreas
     *
     * @return $this
     */
    public function setPriceAreas($priceAreas)
    {
        $this->container['priceAreas'] = $priceAreas;

        return $this;
    }

    /**
     * Gets ticketsTotal
     *
     * @return int
     */
    public function getTicketsTotal()
    {
        return $this->container['ticketsTotal'];
    }

    /**
     * Sets ticketsTotal
     *
     * @param int $ticketsTotal ticketsTotal
     *
     * @return $this
     */
    public function setTicketsTotal($ticketsTotal)
    {
        $this->container['ticketsTotal'] = $ticketsTotal;

        return $this;
    }

    /**
     * Gets ticketsSold
     *
     * @return int
     */
    public function getTicketsSold()
    {
        return $this->container['ticketsSold'];
    }

    /**
     * Sets ticketsSold
     *
     * @param int $ticketsSold ticketsSold
     *
     * @return $this
     */
    public function setTicketsSold($ticketsSold)
    {
        $this->container['ticketsSold'] = $ticketsSold;

        return $this;
    }

    /**
     * Gets ticketsFree
     *
     * @return int
     */
    public function getTicketsFree()
    {
        return $this->container['ticketsFree'];
    }

    /**
     * Sets ticketsFree
     *
     * @param int $ticketsFree ticketsFree
     *
     * @return $this
     */
    public function setTicketsFree($ticketsFree)
    {
        $this->container['ticketsFree'] = $ticketsFree;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return string[]
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param string[] $flags flags
     *
     * @return $this
     */
    public function setFlags($flags)
    {
        $allowedValues = $this->getFlagsAllowableValues();
        if (!is_null($flags) && array_diff($flags, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'flags', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['flags'] = $flags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
