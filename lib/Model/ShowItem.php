<?php
/**
 * ShowItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  kinoheld\GenericProviderClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * cinema
 *
 * cinema movie
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sm@kinoheld.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace kinoheld\GenericProviderClient\Model;

use \ArrayAccess;
use \kinoheld\GenericProviderClient\ObjectSerializer;

/**
 * ShowItem Class Doc Comment
 *
 * @category Class
 * @package  kinoheld\GenericProviderClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShowItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShowItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'movie_id' => 'int',
'duration' => 'int',
'beginning' => 'string',
'sale_start' => 'string',
'sale_end' => 'string',
'auditorium_id' => 'int',
'seat_selection_available' => 'bool',
'icaa_id' => 'int',
'language_audio' => 'string',
'language_subtitle' => 'string',
'price_areas' => '\kinoheld\GenericProviderClient\Model\PriceAreaItem[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'movie_id' => null,
'duration' => null,
'beginning' => null,
'sale_start' => null,
'sale_end' => null,
'auditorium_id' => null,
'seat_selection_available' => null,
'icaa_id' => null,
'language_audio' => null,
'language_subtitle' => null,
'price_areas' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'movie_id' => 'movieId',
'duration' => 'duration',
'beginning' => 'beginning',
'sale_start' => 'saleStart',
'sale_end' => 'saleEnd',
'auditorium_id' => 'auditoriumId',
'seat_selection_available' => 'seatSelectionAvailable',
'icaa_id' => 'icaaId',
'language_audio' => 'languageAudio',
'language_subtitle' => 'languageSubtitle',
'price_areas' => 'priceAreas'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'movie_id' => 'setMovieId',
'duration' => 'setDuration',
'beginning' => 'setBeginning',
'sale_start' => 'setSaleStart',
'sale_end' => 'setSaleEnd',
'auditorium_id' => 'setAuditoriumId',
'seat_selection_available' => 'setSeatSelectionAvailable',
'icaa_id' => 'setIcaaId',
'language_audio' => 'setLanguageAudio',
'language_subtitle' => 'setLanguageSubtitle',
'price_areas' => 'setPriceAreas'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'movie_id' => 'getMovieId',
'duration' => 'getDuration',
'beginning' => 'getBeginning',
'sale_start' => 'getSaleStart',
'sale_end' => 'getSaleEnd',
'auditorium_id' => 'getAuditoriumId',
'seat_selection_available' => 'getSeatSelectionAvailable',
'icaa_id' => 'getIcaaId',
'language_audio' => 'getLanguageAudio',
'language_subtitle' => 'getLanguageSubtitle',
'price_areas' => 'getPriceAreas'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['movie_id'] = isset($data['movie_id']) ? $data['movie_id'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['beginning'] = isset($data['beginning']) ? $data['beginning'] : null;
        $this->container['sale_start'] = isset($data['sale_start']) ? $data['sale_start'] : null;
        $this->container['sale_end'] = isset($data['sale_end']) ? $data['sale_end'] : null;
        $this->container['auditorium_id'] = isset($data['auditorium_id']) ? $data['auditorium_id'] : null;
        $this->container['seat_selection_available'] = isset($data['seat_selection_available']) ? $data['seat_selection_available'] : null;
        $this->container['icaa_id'] = isset($data['icaa_id']) ? $data['icaa_id'] : null;
        $this->container['language_audio'] = isset($data['language_audio']) ? $data['language_audio'] : null;
        $this->container['language_subtitle'] = isset($data['language_subtitle']) ? $data['language_subtitle'] : null;
        $this->container['price_areas'] = isset($data['price_areas']) ? $data['price_areas'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['movie_id'] === null) {
            $invalidProperties[] = "'movie_id' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['beginning'] === null) {
            $invalidProperties[] = "'beginning' can't be null";
        }
        if ($this->container['sale_start'] === null) {
            $invalidProperties[] = "'sale_start' can't be null";
        }
        if ($this->container['sale_end'] === null) {
            $invalidProperties[] = "'sale_end' can't be null";
        }
        if ($this->container['auditorium_id'] === null) {
            $invalidProperties[] = "'auditorium_id' can't be null";
        }
        if ($this->container['seat_selection_available'] === null) {
            $invalidProperties[] = "'seat_selection_available' can't be null";
        }
        if ($this->container['icaa_id'] === null) {
            $invalidProperties[] = "'icaa_id' can't be null";
        }
        if ($this->container['language_audio'] === null) {
            $invalidProperties[] = "'language_audio' can't be null";
        }
        if ($this->container['language_subtitle'] === null) {
            $invalidProperties[] = "'language_subtitle' can't be null";
        }
        if ($this->container['price_areas'] === null) {
            $invalidProperties[] = "'price_areas' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets movie_id
     *
     * @return int
     */
    public function getMovieId()
    {
        return $this->container['movie_id'];
    }

    /**
     * Sets movie_id
     *
     * @param int $movie_id movie_id
     *
     * @return $this
     */
    public function setMovieId($movie_id)
    {
        $this->container['movie_id'] = $movie_id;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets beginning
     *
     * @return string
     */
    public function getBeginning()
    {
        return $this->container['beginning'];
    }

    /**
     * Sets beginning
     *
     * @param string $beginning beginning
     *
     * @return $this
     */
    public function setBeginning($beginning)
    {
        $this->container['beginning'] = $beginning;

        return $this;
    }

    /**
     * Gets sale_start
     *
     * @return string
     */
    public function getSaleStart()
    {
        return $this->container['sale_start'];
    }

    /**
     * Sets sale_start
     *
     * @param string $sale_start sale_start
     *
     * @return $this
     */
    public function setSaleStart($sale_start)
    {
        $this->container['sale_start'] = $sale_start;

        return $this;
    }

    /**
     * Gets sale_end
     *
     * @return string
     */
    public function getSaleEnd()
    {
        return $this->container['sale_end'];
    }

    /**
     * Sets sale_end
     *
     * @param string $sale_end sale_end
     *
     * @return $this
     */
    public function setSaleEnd($sale_end)
    {
        $this->container['sale_end'] = $sale_end;

        return $this;
    }

    /**
     * Gets auditorium_id
     *
     * @return int
     */
    public function getAuditoriumId()
    {
        return $this->container['auditorium_id'];
    }

    /**
     * Sets auditorium_id
     *
     * @param int $auditorium_id auditorium_id
     *
     * @return $this
     */
    public function setAuditoriumId($auditorium_id)
    {
        $this->container['auditorium_id'] = $auditorium_id;

        return $this;
    }

    /**
     * Gets seat_selection_available
     *
     * @return bool
     */
    public function getSeatSelectionAvailable()
    {
        return $this->container['seat_selection_available'];
    }

    /**
     * Sets seat_selection_available
     *
     * @param bool $seat_selection_available seat_selection_available
     *
     * @return $this
     */
    public function setSeatSelectionAvailable($seat_selection_available)
    {
        $this->container['seat_selection_available'] = $seat_selection_available;

        return $this;
    }

    /**
     * Gets icaa_id
     *
     * @return int
     */
    public function getIcaaId()
    {
        return $this->container['icaa_id'];
    }

    /**
     * Sets icaa_id
     *
     * @param int $icaa_id icaa_id
     *
     * @return $this
     */
    public function setIcaaId($icaa_id)
    {
        $this->container['icaa_id'] = $icaa_id;

        return $this;
    }

    /**
     * Gets language_audio
     *
     * @return string
     */
    public function getLanguageAudio()
    {
        return $this->container['language_audio'];
    }

    /**
     * Sets language_audio
     *
     * @param string $language_audio language_audio
     *
     * @return $this
     */
    public function setLanguageAudio($language_audio)
    {
        $this->container['language_audio'] = $language_audio;

        return $this;
    }

    /**
     * Gets language_subtitle
     *
     * @return string
     */
    public function getLanguageSubtitle()
    {
        return $this->container['language_subtitle'];
    }

    /**
     * Sets language_subtitle
     *
     * @param string $language_subtitle language_subtitle
     *
     * @return $this
     */
    public function setLanguageSubtitle($language_subtitle)
    {
        $this->container['language_subtitle'] = $language_subtitle;

        return $this;
    }

    /**
     * Gets price_areas
     *
     * @return \kinoheld\GenericProviderClient\Model\PriceAreaItem[]
     */
    public function getPriceAreas()
    {
        return $this->container['price_areas'];
    }

    /**
     * Sets price_areas
     *
     * @param \kinoheld\GenericProviderClient\Model\PriceAreaItem[] $price_areas price_areas
     *
     * @return $this
     */
    public function setPriceAreas($price_areas)
    {
        $this->container['price_areas'] = $price_areas;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
